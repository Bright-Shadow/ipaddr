#!/bin/bash -e

# Define booleans, to be used when determineing which flags are enabled.
TRUE=0
FALSE=1

# Set all arguments as false, unless enabled with a flag.
print_ipv6=1
print_ipv4=1
print_loopback=1

# Parse arguments
for i in "$@";
do
    case $1 in
        -6|--v6)
            print_ipv6=0
            shift # past argument
            ;;
        -4|--v4)
            print_ipv4=0
            shift # past argument
            ;;
        -lo|--loopback)
            print_loopback=0
            shift # past argument
            ;;
        -h|--help)
            echo "Prints the ip address of the local system. By default, no options are selected."
            echo "Options:"
            echo "  -6, --v6         Prints ipv6 addresses"
            echo "  -4, --v4         Prints ipv4 addresses"
            echo "  -lo, --loopback  Prints loopback addresses for the selected ip versions"
            ;;
        *)
            echo "Unknown option $1"
            exit 1
            ;;
    esac
done

# Prints the devices ipv4 addresses, printing the loopback addresses if that flag is enabled.
printipv4() {
    # Separator is now a newline instead of whitespace. Allows for-loop to split at newlines only.
    IFS=$'\n'

    for net_device in $(ip -oneline -4 address show);
    do
        device="$(echo "$net_device" | awk '{print $2}' | cut -d/ -f1)"
        ipv4addr="$(echo "$net_device" | awk '{print $4}' | cut -d/ -f1)"

        # Skip loopback addresses unless specifically asked for.
        if [[ $print_loopback -eq $TRUE ]] || ! [[ "$device" == "lo" ]];
        then echo "$ipv4addr"
        fi
    done
}

# Prints the devices ipv6 addresses, printing the loopback addresses if that flag is enabled.
printipv6() {
    # Print IPv6 addresses

    # Separator is now a newline instead of whitespace. Allows for-loop to split at newlines only.
    IFS=$'\n'

    for net_device in $(ip -oneline -6 address show);
    do
        device="$(echo "$net_device" | awk '{print $2}' | cut -d/ -f1)"
        ipv6addr="$(echo "$net_device" | awk '{print $4}' | cut -d/ -f1)"

        # Skip loopback addresses unless specifically asked for.
        if [[ $print_loopback -eq $TRUE ]] || ! [[ "$device" == "lo" ]];
        then echo "$ipv6addr"
        fi
    done
}

## SCRIPT BODY BEGINS HERE ##

if [[ $print_ipv4 -eq $TRUE ]];
then printipv4
fi

if [[ $print_ipv6 -eq $TRUE ]];
then printipv6
fi

exit 0
